{"version":3,"sources":["components/CompanyData.js","components/Filter.js","components/Table.js","components/Repo.js","components/Testing.js","components/Header.js","App.js","index.js"],"names":["CompanyData","Filter","column","style","marginTop","canFilter","render","DefaultColumnFilter","filterValue","setFilter","length","preFilteredRows","Input","value","onChange","e","target","undefined","placeholder","SelectColumnFilter","id","options","React","useMemo","Set","forEach","row","add","values","CustomInput","type","map","option","Table","columns","data","renderRowSubComponent","useState","filterInput","setFilterInput","useTable","defaultColumn","initialState","pageIndex","useFilters","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","visibleColumns","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","generateSortingIndicator","isSorted","isSortedDesc","className","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","i","cells","cell","getCellProps","isExpanded","colSpan","getRowProps","key","onClick","disabled","Number","width","height","FetchData","Header","Cell","getToggleRowExpandedProps","accessor","disableFilters","d","fork","toString","filter","repos","setRepos","setLoading","useEffect","fetch","then","res","json","catch","err","console","log","original","name","description","html_url","stargazers_count","watchers_count","license","language","Card","margin","CardBody","CardTitle","CardText","href","class","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Repo","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b4b818a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction CompanyData() {\r\n  const [comp, setComp] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/orgs/catalyst\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setComp(data);\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div key={comp.id}>\r\n        <h2>Name:{comp.name}</h2>\r\n        <p>Description: {comp.description}</p>\r\n        <p>Location: {comp.location}</p>\r\n        <p>Total number of repositories: {comp.public_repos}</p>\r\n        <p>\r\n          Blog URL: <a href={comp.blog}>{comp.blog}</a>\r\n        </p>\r\n        <p>\r\n          GitHub URL: <a href={comp.html_url}>{comp.html_url}</a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompanyData;\r\n","import React from \"react\";\r\nimport { Input, CustomInput } from \"reactstrap\";\r\n\r\nexport const Filter = ({ column }) => {\r\n  return (\r\n    <div style={{ marginTop: 5 }}>\r\n      {column.canFilter && column.render(\"Filter\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const DefaultColumnFilter = ({\r\n  column: {\r\n    filterValue,\r\n    setFilter,\r\n    preFilteredRows: { length },\r\n  },\r\n}) => {\r\n  return (\r\n    <Input\r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n      placeholder={`search (${length}) ...`}\r\n    />\r\n  );\r\n};\r\n\r\nexport const SelectColumnFilter = ({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) => {\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <CustomInput\r\n      id=\"custom-select\"\r\n      type=\"select\"\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option) => (\r\n        <option key={option} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </CustomInput>\r\n  );\r\n};\r\n","import React, { useState, Fragment } from \"react\";\r\nimport {\r\n  useFilters,\r\n  useTable,\r\n  useSortBy,\r\n  usePagination,\r\n  useExpanded,\r\n} from \"react-table\";\r\nimport { Filter, DefaultColumnFilter } from \"./Filter\";\r\n\r\nexport default function Table({ columns, data, renderRowSubComponent }) {\r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n  // Use the useTable Hook to send the columns and data to build the table\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    visibleColumns,\r\n    setFilter,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn: { Filter: DefaultColumnFilter },\r\n      initialState: { pageIndex: 0 },\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination\r\n  );\r\n\r\n  const handleFilterChange = (e) => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"name\", value);\r\n    setFilterInput(value);\r\n  };\r\n\r\n  const generateSortingIndicator = (column) => {\r\n    return column.isSorted ? (column.isSortedDesc ? \" 🔽\" : \" 🔼\") : \"\";\r\n  };\r\n\r\n  /* \r\n      Render the UI for your table\r\n      - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n    */\r\n  return (\r\n    <>\r\n      <div>\r\n        <input\r\n          className=\"form-control\"\r\n          value={filterInput}\r\n          onChange={handleFilterChange}\r\n          placeholder={\"Search name\"}\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-hover\" {...getTableProps()}>\r\n          <thead className=\"thead-dark\">\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    <div {...column.getSortByToggleProps()}>\r\n                      {column.render(\"Header\")}\r\n                      {generateSortingIndicator(column)}\r\n                    </div>\r\n                    <Filter column={column} />\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Fragment key={row.getRowProps().key}>\r\n                  <tr>\r\n                    {row.cells.map((cell) => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                  {row.isExpanded && (\r\n                    <tr>\r\n                      <td colSpan={visibleColumns.length}>\r\n                        {renderRowSubComponent(row)}\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </Fragment>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <ul className=\"pagination justify-content-center\">\r\n        <li\r\n          className=\"page-item\"\r\n          onClick={() => gotoPage(0)}\r\n          disabled={!canPreviousPage}\r\n        >\r\n          <button className=\"page-link\">First</button>\r\n        </li>\r\n        <li\r\n          className=\"page-item\"\r\n          onClick={() => previousPage()}\r\n          disabled={!canPreviousPage}\r\n        >\r\n          <button className=\"page-link\">{\"<\"}</button>\r\n        </li>\r\n        <li\r\n          className=\"page-item\"\r\n          onClick={() => nextPage()}\r\n          disabled={!canNextPage}\r\n        >\r\n          <button className=\"page-link\">{\">\"}</button>\r\n        </li>\r\n        <li\r\n          className=\"page-item\"\r\n          onClick={() => gotoPage(pageCount - 1)}\r\n          disabled={!canNextPage}\r\n        >\r\n          <button className=\"page-link\">Last</button>\r\n        </li>\r\n        <li>\r\n          <button className=\"page-link\">\r\n            Page{\" \"}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{\" \"}\r\n          </button>\r\n        </li>\r\n        <select\r\n          className=\"form-control\"\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n          style={{ width: \"120px\", height: \"38px\" }}\r\n        >\r\n          {[5, 10, 20, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { SelectColumnFilter } from \"./Filter\";\r\nimport Table from \"./Table\";\r\nimport { Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\n\r\nfunction FetchData() {\r\n  const renderRowSubComponent = (row) => {\r\n    const {\r\n      name,\r\n      description,\r\n      html_url,\r\n      stargazers_count,\r\n      watchers_count,\r\n      license,\r\n      language,\r\n    } = row.original;\r\n    return (\r\n      <Card style={{ width: \"40rem\", margin: \"0 auto\" }}>\r\n        <CardBody>\r\n          <CardTitle>\r\n            <strong>{`${name}`} </strong>\r\n          </CardTitle>\r\n          <CardText>\r\n            <strong>Description</strong>: {description} <br />\r\n            <strong>GitHub URL</strong>: <a href={html_url}>{html_url}</a>\r\n            <br />\r\n            <strong>Star Count</strong>: {stargazers_count} <br />\r\n            <strong>Watchers Count</strong>: {watchers_count} <br />\r\n            <strong>License</strong>: {license.name} <br />\r\n            <strong>Language</strong>: {language} <br />\r\n          </CardText>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: () => null,\r\n        id: \"expander\", // 'id' is required\r\n        Cell: ({ row }) => (\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n            {row.isExpanded ? \"👇\" : \"👉\"}\r\n          </span>\r\n        ),\r\n      },\r\n      {\r\n        Header: \"Name\",\r\n        accessor: \"name\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        id: \"fork\",\r\n        Header: \"Forked\",\r\n        accessor: (d) => d.fork.toString(),\r\n        Filter: SelectColumnFilter,\r\n        filter: \"equals\",\r\n      },\r\n      {\r\n        Header: \"Created Time\",\r\n        accessor: \"created_at\",\r\n        disableFilters: true,\r\n      },\r\n      {\r\n        Header: \"Updated Time\",\r\n        accessor: \"updated_at\",\r\n        disableFilters: true,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [repos, setRepos] = useState([]);\r\n  const [contributors, setContributors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/orgs/catalyst/repos\")\r\n      .then((res) => res.json())\r\n      .then((data) => setRepos(data))\r\n      .then(() => setLoading(false))\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Table\r\n        columns={columns}\r\n        data={repos}\r\n        renderRowSubComponent={renderRowSubComponent}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FetchData;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport {\r\n  useFilters,\r\n  useTable,\r\n  useSortBy,\r\n  usePagination,\r\n  useAsyncDebounce,\r\n} from \"react-table\";\r\nimport Table from \"./Table\";\r\n\r\nfunction FetchData() {\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Name\",\r\n        accessor: \"name\",\r\n      },\r\n      {\r\n        Header: \"Description\",\r\n        accessor: \"description\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"GitHub URL\",\r\n        accessor: \"html_url\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        id: \"fork\",\r\n        Header: \"Forked\",\r\n        accessor: (d) => d.fork.toString(),\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"Star Count\",\r\n        accessor: \"stargazers_count\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"Watchers Count\",\r\n        accessor: \"watchers_count\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"License\",\r\n        accessor: \"license.name\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"Language\",\r\n        accessor: \"language\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"Top 5 Contributors\",\r\n        accessor: \"topcontributor\",\r\n        disableSortBy: true,\r\n      },\r\n      {\r\n        Header: \"Created Time\",\r\n        accessor: \"created_at\",\r\n      },\r\n      {\r\n        Header: \"Updated Time\",\r\n        accessor: \"updated_at\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [repos, setRepos] = useState([]);\r\n  const [contributors, setContributors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/orgs/catalyst/repos\")\r\n      .then((res) => res.json())\r\n      .then((data) => setRepos(data))\r\n      .then(() => setLoading(false))\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  function Table({ columns, data }) {\r\n    const [filterInput, setFilterInput] = useState(\"\");\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const {\r\n      getTableProps, // table props from react-table\r\n      getTableBodyProps, // table body props from react-table\r\n      headerGroups, // headerGroups, if your table has groupings\r\n      prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n      setFilter,\r\n      page,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      pageCount,\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n      state: { pageIndex, pageSize },\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        initialState: { pageIndex: 0 },\r\n      },\r\n      useFilters,\r\n      useSortBy,\r\n      usePagination\r\n    );\r\n\r\n    const handleFilterChange = (e) => {\r\n      const value = e.target.value || undefined;\r\n      setFilter(\"name\", value);\r\n      setFilterInput(value);\r\n    };\r\n\r\n    /* \r\n        Render the UI for your table\r\n        - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n      */\r\n    return (\r\n      <>\r\n        <div>\r\n          <input\r\n            className=\"form-control\"\r\n            value={filterInput}\r\n            onChange={handleFilterChange}\r\n            placeholder={\"Search name\"}\r\n          />\r\n        </div>\r\n        <br />\r\n        <table\r\n          className=\"table table-hover table-responsive\"\r\n          {...getTableProps()}\r\n        >\r\n          <thead className=\"thead-dark\">\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render(\"Header\")}\r\n                    {/* Add a sort direction indicator */}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? \" 🔽\"\r\n                          : \" 🔼\"\r\n                        : \"\"}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <ul className=\"pagination justify-content-center\">\r\n          <li\r\n            className=\"page-item\"\r\n            onClick={() => gotoPage(0)}\r\n            disabled={!canPreviousPage}\r\n          >\r\n            <button className=\"page-link\">First</button>\r\n          </li>\r\n          <li\r\n            className=\"page-item\"\r\n            onClick={() => previousPage()}\r\n            disabled={!canPreviousPage}\r\n          >\r\n            <button className=\"page-link\">{\"<\"}</button>\r\n          </li>\r\n          <li\r\n            className=\"page-item\"\r\n            onClick={() => nextPage()}\r\n            disabled={!canNextPage}\r\n          >\r\n            <button className=\"page-link\">{\">\"}</button>\r\n          </li>\r\n          <li\r\n            className=\"page-item\"\r\n            onClick={() => gotoPage(pageCount - 1)}\r\n            disabled={!canNextPage}\r\n          >\r\n            <button className=\"page-link\">Last</button>\r\n          </li>\r\n          <li>\r\n            <button className=\"page-link\">\r\n              Page{\" \"}\r\n              <strong>\r\n                {pageIndex + 1} of {pageOptions.length}\r\n              </strong>{\" \"}\r\n            </button>\r\n          </li>\r\n          <select\r\n            className=\"form-control\"\r\n            value={pageSize}\r\n            onChange={(e) => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n            style={{ width: \"120px\", height: \"38px\" }}\r\n          >\r\n            {[5, 10, 20, 30, 40, 50].map((pageSize) => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"https://api.github.com/orgs/catalyst/repos\")\r\n  //     .then((res) => res.json())\r\n  //     .then((data) => {\r\n  //       setRepos(data); // Data 1(repos) is received\r\n  //       // Now We make another API call to get Data 2 (contributors)\r\n  //       console.log(1);\r\n  //       console.log(repos[0].contributors_url);\r\n  //       return fetch(repos[0].contributors_url);\r\n  //     })\r\n  //     .then((res) => res.json()) // Chaining promise,handling 2nd Fetch request\r\n  //     .then((data2) => {\r\n  //       console.log(2);\r\n  //       console.log(data2);\r\n  //       setContributors(data2);\r\n  //     })\r\n  //     .then(() => {\r\n  //       setLoading(false);\r\n  //     })\r\n  //     .catch((err) => console.log(err));\r\n  // }, []);\r\n\r\n  //Sorting\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* <div className=\"buttonContainer\">\r\n        <div>\r\n          <button\r\n            className=\"btn btn-primary mycustom dropdown-toggle mr-4\"\r\n            type=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            Sort by{\" \"}\r\n          </button>\r\n\r\n          <div className=\"dropdown-menu\">\r\n            <a\r\n              className=\"dropdown-item\"\r\n              href=\"#\"\r\n              // onClick={() => sortBy(\"funded\")}\r\n            >\r\n              Percentage fund\r\n            </a>\r\n            <a\r\n              className=\"dropdown-item\"\r\n              href=\"#\"\r\n              // onClick={() => sortBy(\"backers\")}\r\n            >\r\n              Number of backers\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n\r\n      {/* <Repocard repos={currentRepo} loading={loading} />\r\n      <Pagination\r\n        reposPerPage={reposPerPage}\r\n        totalRepos={repos.length}\r\n        paginate={paginate}\r\n      /> */}\r\n\r\n      <Table columns={columns} data={repos} filterable />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FetchData;\r\n","import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n      <div className=\"navbar-brand\">\r\n        <a href=\"/\">THE LOGO</a>\r\n      </div>\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"nav navbar-nav ml-auto\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">\r\n              Home\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">\r\n              About Us\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import CompanyData from \"./components/CompanyData\";\nimport Repo from \"./components/Repo\";\nimport Testing from \"./components/Testing\";\nimport { Button } from \"react-bootstrap\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      {/* <CompanyData /> */}\n      <Repo />\n      {/* <Testing /> */}\n      {/* <Dropdown /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}