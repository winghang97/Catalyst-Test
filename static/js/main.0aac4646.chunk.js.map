{"version":3,"sources":["components/CompanyData.js","components/RepoCard.js","components/Pagination.js","components/Testing.js","components/Dropdown.js","components/Header.js","App.js","index.js"],"names":["CompanyData","RepoCard","repos","loading","console","log","updated_at","moment","className","map","repo","name","description","href","fork","toString","stargazers_count","watchers_count","license","language","created_at","id","Pagination","reposPerPage","totalRepos","paginate","PageNumbers","i","Math","ceil","push","aria-label","aria-hidden","number","onClick","FetchData","useState","setRepos","setLoading","currentPage","setCurrentPage","useEffect","fetch","then","res","json","data","catch","err","indexOfLastRepo","indedxOfFirstRepo","currentRepo","slice","length","pageNumber","ForkSelect","Header","class","type","data-toggle","data-target","aria-controls","aria-expanded","App","Testing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0aac4646.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction CompanyData() {\r\n  const [comp, setComp] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/orgs/catalyst\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setComp(data);\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div key={comp.id}>\r\n        <h2>Name:{comp.name}</h2>\r\n        <p>Description: {comp.description}</p>\r\n        <p>Location: {comp.location}</p>\r\n        <p>Total number of repositories: {comp.public_repos}</p>\r\n        <p>\r\n          Blog URL: <a href={comp.blog}>{comp.blog}</a>\r\n        </p>\r\n        <p>\r\n          GitHub URL: <a href={comp.html_url}>{comp.html_url}</a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompanyData;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst RepoCard = ({ repos, loading }) => {\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n  console.log(`${repos[0].updated_at}`);\r\n  console.log(moment(\"${repos[0].updated_at.toString()\"));\r\n\r\n  return (\r\n    <table className=\"table table-hover table-responsive\">\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>GitHub URL</th>\r\n          <th>Forked</th>\r\n          <th>Star Count</th>\r\n          <th>Watchers Count</th>\r\n          <th>License</th>\r\n          <th>Language</th>\r\n          <th>Top 5 Contributors</th>\r\n          <th>Created Time</th>\r\n          <th>Updated Time</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {repos.map((repo) => (\r\n          <tr key={repo.id}>\r\n            <td>{repo.name}</td>\r\n            <td>{repo.description}</td>\r\n            <td>\r\n              <a href=\"{repo.html_url}\">{repo.name}</a>\r\n            </td>\r\n            <td>{repo.fork.toString()}</td>\r\n            <td>{repo.stargazers_count}</td>\r\n            <td>{repo.watchers_count}</td>\r\n            <td>{repo.license ? repo.license.name : \"null\"}</td>\r\n            <td>{repo.language}</td>\r\n            <td></td>\r\n            <td>{repo.created_at}</td>\r\n            {/* <td>{moment(repo.updated_at)}</td> */}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    // <div className=\"row\">\r\n    //   <ul className=\"list-group\">\r\n    //     {repos.length &&\r\n    //       repos.map((repo) => (\r\n    //         <li key={repo.id} className=\"list-group-item\">\r\n    //           <h5 className=\"lead\">Name: {repo.name}</h5>\r\n    //           <p>Description: {repo.description}</p>\r\n    //           <p>\r\n    //             Link: <a href=\"{repo.html_url}\">{repo.html_url}</a>\r\n    //           </p>\r\n    //           <p>Fork: {repo.fork.toString()}</p>\r\n    //           <p>Star Count: {repo.stargazers_count}</p>\r\n    //           <p>Watchers Count: {repo.watchers_count}</p>\r\n    //           <p>License: {repo.license ? repo.license.name : \"null\"}</p>\r\n    //           <p>Language: {repo.language}</p>\r\n    //           <p>Top 5 Contributors:</p>\r\n    //         </li>\r\n    //       ))}\r\n    //   </ul>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default RepoCard;\r\n","import React from \"react\";\r\n\r\nexport const Pagination = ({ reposPerPage, totalRepos, paginate }) => {\r\n  const PageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalRepos / reposPerPage); i++) {\r\n    PageNumbers.push(i);\r\n  }\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination justify-content-center mt-4\">\r\n        <li className=\"page-item\">\r\n          <a className=\"page-link\" href=\"!#\" aria-label=\"Previous\">\r\n            <span aria-hidden=\"true\">&laquo;</span>\r\n          </a>\r\n        </li>\r\n        {PageNumbers.map((number) => (\r\n          <li key={number} className=\"page-item\">\r\n            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n        <li className=\"page-item\">\r\n          <a className=\"page-link\" href=\"!#\" aria-label=\"Next\">\r\n            <span aria-hidden=\"true\">&raquo;</span>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Repocard from \"./RepoCard\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nfunction FetchData() {\r\n  const [repos, setRepos] = useState([]);\r\n  const [contributors, setContributors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [reposPerPage] = useState(5);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/orgs/catalyst/repos\")\r\n      .then((res) => res.json())\r\n      .then((data) => setRepos(data))\r\n      .then(() => setLoading(false))\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"https://api.github.com/orgs/catalyst/repos\")\r\n  //     .then((res) => res.json())\r\n  //     .then((data) => {\r\n  //       setRepos(data); // Data 1(repos) is received\r\n  //       // Now We make another API call to get Data 2 (contributors)\r\n  //       console.log(1);\r\n  //       console.log(repos[0].contributors_url);\r\n  //       return fetch(repos[0].contributors_url);\r\n  //     })\r\n  //     .then((res) => res.json()) // Chaining promise,handling 2nd Fetch request\r\n  //     .then((data2) => {\r\n  //       console.log(2);\r\n  //       console.log(data2);\r\n  //       setContributors(data2);\r\n  //     })\r\n  //     .then(() => {\r\n  //       setLoading(false);\r\n  //     })\r\n  //     .catch((err) => console.log(err));\r\n  // }, []);\r\n\r\n  //Get current repos\r\n  const indexOfLastRepo = currentPage * reposPerPage;\r\n  const indedxOfFirstRepo = indexOfLastRepo - reposPerPage;\r\n  const currentRepo = repos.slice(indedxOfFirstRepo, indexOfLastRepo);\r\n\r\n  // Change page\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  //Sorting\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* <div className=\"buttonContainer\">\r\n        <div>\r\n          <button\r\n            className=\"btn btn-primary mycustom dropdown-toggle mr-4\"\r\n            type=\"button\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            Sort by{\" \"}\r\n          </button>\r\n\r\n          <div className=\"dropdown-menu\">\r\n            <a\r\n              className=\"dropdown-item\"\r\n              href=\"#\"\r\n              // onClick={() => sortBy(\"funded\")}\r\n            >\r\n              Percentage fund\r\n            </a>\r\n            <a\r\n              className=\"dropdown-item\"\r\n              href=\"#\"\r\n              // onClick={() => sortBy(\"backers\")}\r\n            >\r\n              Number of backers\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n\r\n      <Repocard repos={currentRepo} loading={loading} />\r\n      <Pagination\r\n        reposPerPage={reposPerPage}\r\n        totalRepos={repos.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FetchData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\n\r\nfunction ForkSelect() {\r\n  const [repos, setRepos] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [fork, setFork] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.github.com/orgs/catalyst/repos\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setRepos(data);\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* <DropdownButton id=\"dropdown-basic-button\" title=\"Filter\">\r\n        <Dropdown.Item value=\"\">All</Dropdown.Item>\r\n        <Dropdown.Item value=\"true\">Forked</Dropdown.Item>\r\n        <Dropdown.Item value=\"false\">Not Forked</Dropdown.Item>\r\n      </DropdownButton> */}\r\n\r\n      <select onChange={(e) => setFork({ filter: e.target.value })}>\r\n        <option value=\"\">All</option>\r\n        <option value=\"true\">Forked</option>\r\n        <option value=\"false\">Not Forked</option>\r\n      </select>\r\n      <br />\r\n      <br />\r\n      {repos\r\n        .filter((repo) => setFork.filter || repo.fork === setFork.filter)\r\n        .map((repo) =>\r\n          repo.fork === \"true\" ? (\r\n            <div className=\"fork\">{repo.name}</div>\r\n          ) : (\r\n            <div className=\"notfork\">{repo.name}</div>\r\n          )\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForkSelect;\r\n","import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n      <div className=\"navbar-brand\">\r\n        <a href=\"/\">THE LOGO</a>\r\n      </div>\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"nav navbar-nav ml-auto\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">\r\n              Home\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">\r\n              About Us\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import CompanyData from \"./components/CompanyData\";\nimport Repo from \"./components/Repo\";\nimport Testing from \"./components/Testing\";\nimport Dropdown from \"./components/Dropdown\";\nimport { Button } from \"react-bootstrap\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      {/* <CompanyData /> */}\n      {/* <Repo /> */}\n      <Testing />\n      {/* <Dropdown /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}